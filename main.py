# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\login.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QStackedWidget, 
    QVBoxLayout, QLabel, QFrame, QWidget, 
    QListWidgetItem, QMessageBox
)
from PyQt5.QtCore import Qt, QTimer, QDate
from PyQt5.QtGui import QPixmap
import pygetwindow as gw
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from pywinauto import Application
from plyer import notification
import time
import sys
import sqlite3
import datetime
from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import datetime
import sqlite3
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import datetime
from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.patches import Circle
from matplotlib.animation import FuncAnimation
import numpy as np
import sqlite3
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import numpy as np
import stripes_rc
import icons_rc
import welbeings_rc
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
import matplotlib.pyplot as plt
from io import BytesIO
from smtplib import SMTP

import sqlite3
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import numpy as np
import datetime



class Login(QMainWindow):
  
    def __init__(self):
        super(Login, self).__init__()
        self.setupUi(self)
        

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1484, 1726)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setMaximumSize(QtCore.QSize(600, 16777215))
        self.label.setStyleSheet("\n"
"background-image: url(:/newPrefix/leaf.png);\n"
"border-radius:5px;")
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(":/newPrefix/leaf.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setMinimumSize(QtCore.QSize(650, 0))
        self.frame_3.setMaximumSize(QtCore.QSize(900, 16777215))
        self.frame_3.setStyleSheet("margin-left:100px;")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame_3)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.login_page = QtWidgets.QPushButton(self.frame_3)
        self.login_page.setStyleSheet(" font-family: \'Istok Web\';\n"
"            font-style: normal;\n"
"            font-weight: 700;\n"
"            font-size: 34px;\n"
"            line-height: 38px;\n"
"            color: #5F7C8D;\n"
"background-color: transparent;")
        self.login_page.setObjectName("login_page")
        self.verticalLayout.addWidget(self.login_page)
        self.line = QtWidgets.QFrame(self.frame_3)
        self.line.setStyleSheet("position: absolute;\n"
"            width: 90px;\n"
"            height: 0px;\n"
"            left: -23px;\n"
"            top: 52px;\n"
"            border: 3px solid #5F7C8D;")
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)
        self.gridLayout_2.addLayout(self.verticalLayout, 1, 0, 1, 1)
        self.signup = QtWidgets.QPushButton(self.frame_3)
        font = QtGui.QFont()
        font.setFamily("Istok Web")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(87)
        self.signup.setFont(font)
        self.signup.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.signup.setStyleSheet(" font-family: \'Istok Web\';\n"
"            font-style: normal;\n"
"            font-weight: 700;\n"
"            font-size: 34px;\n"
"            line-height: 38px;\n"
"            color: #5F7C8D;\n"
"background-color: transparent;")
        self.signup.setObjectName("signup")
        self.gridLayout_2.addWidget(self.signup, 1, 1, 1, 1)
        self.password = QtWidgets.QLineEdit(self.frame_3)
        self.password.setStyleSheet("background: transparent;\n"
"            font-family: \'Istok Web\';\n"
"            font-style: normal;\n"
"            font-size: 28px;\n"
"            color: rgba(95, 124, 141, 0.55);\n"
" letter-spacing: 0.75px;\n"
" border: none;\n"
"border-bottom:2.5px solid #5F7C8D;")
        self.password.setText("")
        self.password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.password.setObjectName("password")
        self.gridLayout_2.addWidget(self.password, 3, 0, 1, 2)
        self.Login_button = QtWidgets.QPushButton(self.frame_3)
        self.Login_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Login_button.setStyleSheet(" position: absolute;\n"
"            width: 432px;\n"
"            height: 73px;\n"
"            left: 691px;\n"
"            top: 581px;\n"
"            background: #4B687A;\n"
" font-family: \'Istok Web\';\n"
"            font-style: normal;\n"
"            font-weight: 600;\n"
"            font-size: 28px;\n"
"color : white")
        self.Login_button.setObjectName("Login_button")
        self.gridLayout_2.addWidget(self.Login_button, 4, 0, 1, 2)
        self.label_2 = QtWidgets.QLabel(self.frame_3)
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 90))
        self.label_2.setStyleSheet("\n"
"\n"
"font-family: \'Istok Web\';\n"
"font-style: normal;\n"
"font-weight: 700;\n"
"font-size: 54px;\n"
"line-height: 92px;\n"
"\n"
"color: #7A999C;\n"
"background : transparent;\n"
"margin-bottom:40px;")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout_2.addWidget(self.label_2, 0, 0, 1, 2)
        self.username = QtWidgets.QLineEdit(self.frame_3)
        self.username.setStyleSheet("background: transparent;\n"
"            font-family: \'Istok Web\';\n"
"            font-style: normal;\n"
"            font-size: 28px;\n"
"            color: rgba(95, 124, 141, 0.55);\n"
" letter-spacing: 0.75px;\n"
"border: none;\n"
"border-bottom:2.5px solid #5F7C8D;")
        self.username.setObjectName("username")
        self.gridLayout_2.addWidget(self.username, 2, 0, 1, 2)
        self.horizontalLayout.addWidget(self.frame_3)
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setStyleSheet("")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout.addWidget(self.frame_2)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1484, 18))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.signup.clicked.connect(self.signup_clicked)
        self.Login_button.clicked.connect(self.login_button_clicked) 
        
    def signup_clicked(self):
        signupwin = SignupWindow()
        widget.addWidget(signupwin)
        widget.setCurrentIndex(widget.currentIndex() + 1)
        
    def login_button_clicked(self):
        username = self.username.text()
        password = self.password.text()

        if self.check_credentials(username, password):
                # self.show_message("Login Successful")
                landing = Landing()
                widget.addWidget(landing)
                widget.setCurrentIndex(widget.currentIndex() + 1)
        else:
            self.show_message("Login Failed")
           
    def check_credentials(self, username, password):
        connection = sqlite3.connect("app_screen_time.db")
        cursor = connection.cursor()

        cursor.execute("SELECT * FROM users WHERE username = ? AND password = ?", (username, password))
        user = cursor.fetchone()

        connection.close()

        return user is not None     
        
    def show_message(self, message):
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Information)
        msg.setText(message)
        msg.setWindowTitle("Info")
        msg.exec_()
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.login_page.setText(_translate("MainWindow", "Login"))
        self.signup.setText(_translate("MainWindow", "SignUp"))
        self.password.setPlaceholderText(_translate("MainWindow", "Password"))
        self.Login_button.setText(_translate("MainWindow", "Login"))
        self.label_2.setText(_translate("MainWindow", "Welcome"))
        self.username.setPlaceholderText(_translate("MainWindow", "Username"))

class SignupWindow(QMainWindow):
        
    def __init__(self):
        super(SignupWindow, self).__init__()
        self.setupUi(self)

        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1484, 1726)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setMaximumSize(QtCore.QSize(600, 16777215))
        self.label.setStyleSheet("\n"
"background-image: url(:/newPrefix/leaf.png);\n"
"border-radius:5px;")
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(":/newPrefix/leaf.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setMinimumSize(QtCore.QSize(650, 0))
        self.frame_3.setMaximumSize(QtCore.QSize(900, 16777215))
        self.frame_3.setStyleSheet("margin-left:100px;")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame_3)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_2 = QtWidgets.QLabel(self.frame_3)
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 90))
        self.label_2.setStyleSheet("\n"
"\n"
"font-family: \'Istok Web\';\n"
"font-style: normal;\n"
"font-weight: 700;\n"
"font-size: 54px;\n"
"line-height: 92px;\n"
"\n"
"color: #7A999C;\n"
"background : transparent;\n"
"margin-bottom:40px;")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout_2.addWidget(self.label_2, 0, 0, 1, 2)
        self.login_page = QtWidgets.QPushButton(self.frame_3)
        self.login_page.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.login_page.setStyleSheet(" font-family: \'Istok Web\';\n"
"            font-style: normal;\n"
"            font-weight: 700;\n"
"            font-size: 34px;\n"
"            line-height: 38px;\n"
"            color: #5F7C8D;\n"
"background-color: transparent;")
        self.login_page.setObjectName("login_page")
        self.gridLayout_2.addWidget(self.login_page, 1, 0, 1, 1)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.signup = QtWidgets.QPushButton(self.frame_3)
        font = QtGui.QFont()
        font.setFamily("Istok Web")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(87)
        self.signup.setFont(font)
        self.signup.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.signup.setStyleSheet(" font-family: \'Istok Web\';\n"
"            font-style: normal;\n"
"            font-weight: 700;\n"
"            font-size: 34px;\n"
"            line-height: 38px;\n"
"            color: #5F7C8D;\n"
"background-color: transparent;")
        self.signup.setObjectName("signup")
        self.verticalLayout.addWidget(self.signup)
        self.line = QtWidgets.QFrame(self.frame_3)
        self.line.setStyleSheet("position: absolute;\n"
"            width: 90px;\n"
"            height: 0px;\n"
"            left: -23px;\n"
"            top: 52px;\n"
"            border: 3px solid #5F7C8D;")
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)
        self.gridLayout_2.addLayout(self.verticalLayout, 1, 1, 1, 1)
        self.username = QtWidgets.QLineEdit(self.frame_3)
        self.username.setStyleSheet("background: transparent;\n"
"            font-family: \'Istok Web\';\n"
"            font-style: normal;\n"
"            font-size: 28px;\n"
"            color: rgba(95, 124, 141, 0.55);\n"
" letter-spacing: 0.75px;\n"
"border: none;\n"
"border-bottom:2.5px solid #5F7C8D;")
        self.username.setObjectName("username")
        self.gridLayout_2.addWidget(self.username, 2, 0, 1, 2)
        self.email = QtWidgets.QLineEdit(self.frame_3)
        self.email.setStyleSheet("background: transparent;\n"
"            font-family: \'Istok Web\';\n"
"            font-style: normal;\n"
"            font-size: 28px;\n"
"            color: rgba(95, 124, 141, 0.55);\n"
" letter-spacing: 0.75px;\n"
"border: none;\n"
"border-bottom:2.5px solid #5F7C8D;")
        self.email.setObjectName("email")
        self.gridLayout_2.addWidget(self.email, 3, 0, 1, 2)
        self.password = QtWidgets.QLineEdit(self.frame_3)
        self.password.setStyleSheet("background: transparent;\n"
"            font-family: \'Istok Web\';\n"
"            font-style: normal;\n"
"            font-size: 28px;\n"
"            color: rgba(95, 124, 141, 0.55);\n"
" letter-spacing: 0.75px;\n"
" border: none;\n"
"border-bottom:2.5px solid #5F7C8D;")
        self.password.setText("")
        self.password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.password.setObjectName("password")
        self.gridLayout_2.addWidget(self.password, 4, 0, 1, 2)
        self.Login_button = QtWidgets.QPushButton(self.frame_3)
        self.Login_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Login_button.setStyleSheet(" position: absolute;\n"
"            width: 432px;\n"
"            height: 73px;\n"
"            left: 691px;\n"
"            top: 581px;\n"
"            background: #4B687A;\n"
" font-family: \'Istok Web\';\n"
"            font-style: normal;\n"
"            font-weight: 600;\n"
"            font-size: 28px;\n"
"color : white")
        self.Login_button.setObjectName("Login_button")
        self.gridLayout_2.addWidget(self.Login_button, 5, 0, 1, 2)
        self.horizontalLayout.addWidget(self.frame_3)
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setStyleSheet("")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout.addWidget(self.frame_2)   
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1484, 18))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.login_page.clicked.connect(self.login_page_clicked)
        self.Login_button.clicked.connect(self.on_signup)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    def login_page_clicked(self):
        loginwin = Login()
        widget.addWidget(loginwin)
        widget.setCurrentIndex(widget.currentIndex() + 1)
        
    def on_signup(self):
        username = self.username.text()
        password = self.password.text()
        email = self.email.text()

        connection = sqlite3.connect('app_screen_time.db')
        cursor = connection.cursor()
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                            username TEXT ,
                            password TEXT,
                            email TEXT
                       )''')
        cursor.execute('SELECT * FROM users WHERE username = ?', (username,))
        existing_user = cursor.fetchone()

        if existing_user:
            QMessageBox.warning(self, 'Signup Error', 'Username already exists. Please choose a different one.')
        else:
            # Insert the new user
            cursor.execute('INSERT INTO users (username, password,email) VALUES (?, ?, ?)',
                           (username, password, email ))
            connection.commit()
            connection.close()

            QMessageBox.information(self, 'Signup Successful', 'Account created for {}'.format(username))     
                
    def reset_ui(self):
        self.username.clear()
        self.password.clear()
        self.email.clear()
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_2.setText(_translate("MainWindow", "Welcome"))
        self.login_page.setText(_translate("MainWindow", "Login"))
        self.signup.setText(_translate("MainWindow", "SignUp"))
        self.username.setPlaceholderText(_translate("MainWindow", "Username"))
        self.email.setPlaceholderText(_translate("MainWindow", "Email"))
        self.password.setPlaceholderText(_translate("MainWindow", "Password"))
        self.Login_button.setText(_translate("MainWindow", "Login"))

class Landing(QMainWindow):
    
    def __init__(self):
        super(Landing, self).__init__()
        self.setupUi(self)
        
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(586, 455)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("* {\n"
"  border: none;\n"
"  background-color: transparent;\n"
"  color: #FFF; /* Specify a default color */\n"
"}\n"
"\n"
"#centralwidget {\n"
"  background-color: white\n"
";\n"
"}\n"
"\n"
"#side_menu {\n"
"  background-color: #071e26;\n"
"  border-radius: 20px;\n"
"}\n"
"\n"
"QPushButton {\n"
"  padding: 10px;\n"
"  background-color: #071e26;\n"
"  border-radius: 5px;\n"
"}\n"
"\n"
"#main_body {\n"
"  background-color: #071e26;\n"
"  border-radius: 10px;\n"
"padding:20px\n;"
"}\n"
"")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.header = QtWidgets.QFrame(self.centralwidget)
        self.header.setMinimumSize(QtCore.QSize(0, 70))
        self.header.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.header.setFrameShadow(QtWidgets.QFrame.Raised)
        self.header.setObjectName("header")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.header)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame = QtWidgets.QFrame(self.header)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setMinimumSize(QtCore.QSize(120, 60))
        self.pushButton.setMaximumSize(QtCore.QSize(16777215, 30))
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setStyleSheet("\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"         \n"
"\n"
"            ")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/icons_folder/align-justify.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(24, 24))
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_3.addWidget(self.pushButton, 0, QtCore.Qt.AlignTop)
        self.horizontalLayout_2.addWidget(self.frame, 0, QtCore.Qt.AlignLeft)
        self.frame_3 = QtWidgets.QFrame(self.header)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.label.setFont(font)
        self.label.setStyleSheet("color: black;")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout_4.addWidget(self.label)
        self.horizontalLayout_2.addWidget(self.frame_3)
        self.verticalLayout.addWidget(self.header, 0, QtCore.Qt.AlignTop)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_2.sizePolicy().hasHeightForWidth())
        self.frame_2.setSizePolicy(sizePolicy)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.side_menu = QtWidgets.QWidget(self.frame_2)
        self.side_menu.setMinimumSize(QtCore.QSize(0, 0))
        self.side_menu.setObjectName("side_menu")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.side_menu)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame_4 = QtWidgets.QFrame(self.side_menu)
        self.frame_4.setMinimumSize(QtCore.QSize(150, 0))
        self.frame_4.setMaximumSize(QtCore.QSize(150, 16777215))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Home_button = QtWidgets.QPushButton(self.frame_4)
        self.Home_button.setMinimumSize(QtCore.QSize(0, 80))
        self.Home_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Home_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"         \n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/icons_folder/home.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Home_button.setIcon(icon1)
        self.Home_button.setIconSize(QtCore.QSize(20, 20))
        self.Home_button.setObjectName("Home_button")
        self.verticalLayout_3.addWidget(self.Home_button)
        self.Daily_button = QtWidgets.QPushButton(self.frame_4)
        self.Daily_button.setMinimumSize(QtCore.QSize(0, 80))
        self.Daily_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Daily_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"\n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/icons_folder/file-text.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Daily_button.setIcon(icon2)
        self.Daily_button.setIconSize(QtCore.QSize(20, 20))
        self.Daily_button.setObjectName("Daily_button")
        self.verticalLayout_3.addWidget(self.Daily_button)
        self.Weekly_button = QtWidgets.QPushButton(self.frame_4)
        self.Weekly_button.setMinimumSize(QtCore.QSize(0, 80))
        self.Weekly_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Weekly_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"\n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        self.Weekly_button.setIcon(icon2)
        self.Weekly_button.setIconSize(QtCore.QSize(20, 20))
        self.Weekly_button.setObjectName("Weekly_button")
        self.verticalLayout_3.addWidget(self.Weekly_button)
        self.Reminder_button = QtWidgets.QPushButton(self.frame_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Reminder_button.sizePolicy().hasHeightForWidth())
        self.Reminder_button.setSizePolicy(sizePolicy)
        self.Reminder_button.setMinimumSize(QtCore.QSize(20, 80))
        self.Reminder_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Reminder_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"         \n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/icons_folder/calendar.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Reminder_button.setIcon(icon3)
        self.Reminder_button.setIconSize(QtCore.QSize(20, 20))
        self.Reminder_button.setObjectName("Reminder_button")
        self.verticalLayout_3.addWidget(self.Reminder_button)
        self.return_button = QtWidgets.QPushButton(self.frame_4)
        self.return_button.setMinimumSize(QtCore.QSize(0, 80))
        self.return_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.return_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"         \n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/icons_folder/arrow-left.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.return_button.setIcon(icon4)
        self.return_button.setIconSize(QtCore.QSize(20, 20))
        self.return_button.setObjectName("return_button")
        self.verticalLayout_3.addWidget(self.return_button)
        self.verticalLayout_2.addWidget(self.frame_4)
        self.horizontalLayout.addWidget(self.side_menu)
        self.main_body = QtWidgets.QFrame(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.main_body.sizePolicy().hasHeightForWidth())
        self.main_body.setSizePolicy(sizePolicy)
        self.main_body.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.main_body.setFrameShadow(QtWidgets.QFrame.Raised)
        self.main_body.setObjectName("main_body")
        self.gridLayout = QtWidgets.QGridLayout(self.main_body)
        self.gridLayout.setObjectName("gridLayout")
        self.bar_graph_frame = QtWidgets.QFrame(self.main_body)
        self.bar_graph_frame.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:7px;\n"
"margin-right:35px;")
        self.bar_graph_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.bar_graph_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.bar_graph_frame.setObjectName("bar_graph_frame")
        self.bar_graph_layout = QVBoxLayout(self.bar_graph_frame)
        self.bar_graph_frame.setLayout(self.bar_graph_layout)
       
        self.conn = sqlite3.connect('app_screen_time.db')
        self.timer = QTimer(MainWindow)
        self.timer.timeout.connect(self.update_data_and_plot)
        self.timer.start(1000)
       
        self.gridLayout.addWidget(self.bar_graph_frame, 0, 0, 2, 1)
        self.tasks_frame = QtWidgets.QFrame(self.main_body)
        self.tasks_frame.setMaximumSize(QtCore.QSize(166767, 400))
        self.tasks_frame.setStyleSheet("background-color: rgb(7, 185, 245);\n"
"border-radius:7px;")
        self.tasks_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.tasks_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.tasks_frame.setObjectName("tasks_frame")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.tasks_frame)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.Task_1 = QtWidgets.QLabel(self.tasks_frame)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        conn = sqlite3.connect('app_screen_time.db')
        cursor = conn.cursor()
        present_day = datetime.datetime.now().strftime('%Y-%m-%d')
        cursor.execute("SELECT task FROM tasks WHERE completed='NO' AND date=?", (present_day,))
        uncompleted_tasks = cursor.fetchmany(3)
        
        self.Task_1.setFont(font)                        
        self.Task_1.setStyleSheet("background-color: white;\n"
"border:5px solid white;\n"
"border-radius:7px;\n"
"font-family:Times New Roman;\n"
"color:Black;\n"
"font-weight:600;")
        self.Task_1.setAlignment(QtCore.Qt.AlignCenter)
        self.Task_1.setObjectName("Task_1")
        self.verticalLayout_6.addWidget(self.Task_1)
        self.Task_2 = QtWidgets.QLabel(self.tasks_frame)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.Task_2.setFont(font)
        self.Task_2.setStyleSheet("background-color: white;\n"
"border:5px solid white;\n"
"border-radius:7px;\n"
"font-family:Times New Roman;\n"
"color:Black;\n"
"font-weight:600;")
        self.Task_2.setAlignment(QtCore.Qt.AlignCenter)
        self.Task_2.setObjectName("Task_2")
        self.verticalLayout_6.addWidget(self.Task_2)
        self.Task_3 = QtWidgets.QLabel(self.tasks_frame)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.Task_3.setFont(font)
        self.Task_3.setStyleSheet("background-color: white;\n"
"border:5px solid white;\n"
"border-radius:7px;\n"
"font-family:Times New Roman;\n"
"color:Black;\n"
"font-weight:600;")
        self.Task_3.setAlignment(QtCore.Qt.AlignCenter)
        self.Task_3.setObjectName("Task_3")
        self.verticalLayout_6.addWidget(self.Task_3)
        self.gridLayout.addWidget(self.tasks_frame, 0, 1, 1, 1)
        self.gridLayout.addWidget(self.tasks_frame, 0, 1, 1, 1)
       
        self.extra_frame = QtWidgets.QFrame(self.main_body)
        self.extra_frame.setStyleSheet("background-color: transparent;\n"
"border-radius:7px;")
        self.extra_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.extra_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.extra_frame.setObjectName("extra_frame")
        self.extra_frame.setMaximumWidth(680)
        self.extra_frame.setMinimumHeight(600)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.extra_frame)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
       
        if uncompleted_tasks:
                if len(uncompleted_tasks) >= 1:
                    self.Task_1.setText(uncompleted_tasks[0][0])  # Access the first element of the tuple
                else:
                    self.Task_1.setText("No Tasks for today")

                if len(uncompleted_tasks) >= 2:
                    self.Task_2.setText(uncompleted_tasks[1][0])  # Access the first element of the tuple
                else:
                    self.Task_2.setText("No Other Tasks for today")

                if len(uncompleted_tasks) >= 3:
                    self.Task_3.setText(uncompleted_tasks[2][0])  # Access the first element of the tuple
                else:
                    self.Task_3.setText("No Other Tasks for today")
        else:
            # If there are no uncompleted tasks
            self.Task_1.setText("No Tasks for today")
            self.Task_2.setText("No Tasks for today")
            self.Task_3.setText("No Tasks for today")
            
       
        self.lcdNumber = QtWidgets.QLCDNumber(self.extra_frame)
        self.lcdNumber.setMinimumSize(QtCore.QSize(0, 120))
        self.lcdNumber.setStyleSheet("background-color: #071e26;")
        self.lcdNumber.setObjectName("lcdNumber")
        self.verticalLayout_5.addWidget(self.lcdNumber)
        from graph_ import CPU_details
       
        self.CPU_DETAILS_FRAME = QtWidgets.QFrame(self.extra_frame)
        self.CPU_DETAILS_FRAME.setStyleSheet("padding:0px;")
        self.CPU_DETAILS_FRAME.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.CPU_DETAILS_FRAME.setFrameShadow(QtWidgets.QFrame.Raised)
        self.CPU_DETAILS_FRAME.setMaximumHeight(390)
        self.verticalLayout_5.addWidget(self.CPU_DETAILS_FRAME)


        # Create an instance of CPU_details widget
        self.cpu_details_widget = CPU_details(parent=self.CPU_DETAILS_FRAME)
        # Add CPU_details widget to CPU_DETAILS_FRAME layout
        self.cpu_details_widget = CPU_details(parent=self.CPU_DETAILS_FRAME)  # Pass CPU_DETAILS_FRAME as the parent
        self.verticalLayout_5.addWidget(self.cpu_details_widget)
        layout = QtWidgets.QVBoxLayout(self.CPU_DETAILS_FRAME)
        layout.addWidget(self.cpu_details_widget)
       
       
        self.gridLayout.addWidget(self.extra_frame, 1, 1, 1, 1)
        self.horizontalLayout.addWidget(self.main_body)
        self.timer=QTimer()
        self.timer.timeout.connect(self.lcd_number)
        self.timer.start(1000)
        self.lcd_number()
        self.main_body.raise_()
        self.side_menu.raise_()
        self.verticalLayout.addWidget(self.frame_2)
        MainWindow.setCentralWidget(self.centralwidget)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.menu_expanded = False


        # Connect the button click event to the toggle_menu function
        self.pushButton.clicked.connect(self.toggle_menu)


        # Set up the animation for the side menu
        self.side_menu_animation = QtCore.QPropertyAnimation(self.side_menu, b"maximumWidth")
        self.side_menu_animation.setDuration(300)


        # Set up the central widget animation for overlay effect
        self.central_widget_animation = QtCore.QPropertyAnimation(self.centralwidget, b"geometry")
        self.central_widget_animation.setDuration(300)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.Home_button.clicked.connect(self.home_clicked)
        self.Daily_button.clicked.connect(self.daily_clicked)
        self.Weekly_button.clicked.connect(self.weekly_clicked)
        self.Reminder_button.clicked.connect(self.reminder_clicked)
        self.return_button.clicked.connect(self.return_button_clicked)
    
    def home_clicked(self):
        home = Landing()
        widget.addWidget(home)
        widget.setCurrentIndex(widget.currentIndex() + 1)
        
    def daily_clicked(self):
        daily = daily_report()
        widget.addWidget(daily)
        widget.setCurrentIndex(widget.currentIndex() + 1)
        daily.pie_chart_canvas.draw()

        
    def reminder_clicked(self):
        rem = Reminder()
        widget.addWidget(rem)
        widget.setCurrentIndex(widget.currentIndex() +1)
        
    def weekly_clicked(self):
        week = Weekly()
        widget.addWidget(week)
        widget.setCurrentIndex(widget.currentIndex() + 1)
        
    def return_button_clicked(self):
            reply = QMessageBox.question(
                self,
                'Exit Confirmation',
                'Are you sure you want to exit?',
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )

            # If the user selects "Yes," exit the application
            if reply == QMessageBox.Yes:
                sys.exit()      
        
        

    def toggle_menu(self):
        # Toggle the menu state
        self.menu_expanded = not self.menu_expanded


        # Define the target width for the side menu
        target_width = 200 if self.menu_expanded else 0


        # Update the side menu animation
        self.side_menu_animation.setEndValue(target_width)
        self.side_menu_animation.start()


        # Update the central widget animation for overlay effect
        if self.menu_expanded:
            self.central_widget_animation.setEndValue(QtCore.QRect(200, 0, 586, 370))
        else:
            self.central_widget_animation.setEndValue(QtCore.QRect(0, 0, 586, 370))
        self.central_widget_animation.start()
       
    def lcd_number(self):
        time = datetime.datetime.now()
        formatted_time = time.strftime("%I:%M:%S %p")
        self.lcdNumber.setDigitCount(11)
        # self.lcd_number.set
        self.lcdNumber.display(formatted_time)


   
    def format_time(self, seconds):
        if seconds >= 3600:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            return f"{hours}h {minutes}m"
        elif seconds >= 60:
            minutes = seconds // 60
            return f"{minutes}m"
        else:
            return f"{seconds}s"


    def update_data_and_plot(self):
        self.plot_graph()


    def plot_graph(self):
        
        today_day_of_week = datetime.datetime.now().strftime('%A')    
        cursor = self.conn.cursor()
        cursor.execute("SELECT app_name, total_screen_time FROM screen_time WHERE Day = ? ORDER BY total_screen_time DESC LIMIT 5", (today_day_of_week,))
        data = cursor.fetchall()
        apps = [row[0] for row in data]
        times = [row[1] for row in data]



        formatted_times = [self.format_time(time) for time in times]


        # Close all previous figures
        plt.close('all')


        fig, ax = plt.subplots(figsize=(8, 9))  # Larger figure size
        bars = ax.bar(apps, times, color='skyblue')
        ax.set_xlabel('Tabs/Applications', fontsize=10)
        ax.set_ylabel('Total Screen Time', fontsize=10)  # Adjusted font size for y-label
        ax.set_title('Top Tabs/Applications by Total Screen Time', fontsize=14)
        plt.xticks(rotation=45, ha='right', fontsize=10)  # Adjusted font size for x-ticks
        plt.yticks(fontsize=10)  # Adjusted font size for y-ticks


        # Annotate bars with total time spent
        for bar, time in zip(bars, formatted_times):
            ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), f'{time}', ha='center', va='bottom', fontsize=12)


        plt.tight_layout()


        # Clear the previous layout
        for i in reversed(range(self.bar_graph_layout.count())):
            self.bar_graph_layout.itemAt(i).widget().setParent(None)


        # Embed the Matplotlib figure into the PyQt5 application
        canvas = FigureCanvas(fig)
        self.bar_graph_layout.addWidget(canvas)
        canvas.draw()


 
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Menu"))
        self.label.setText(_translate("MainWindow", "Samadhan App"))
        self.Home_button.setText(_translate("MainWindow", "Home"))
        self.Daily_button.setText(_translate("MainWindow", "Daily"))
        self.Weekly_button.setText(_translate("MainWindow", "Weekly"))
        self.Reminder_button.setText(_translate("MainWindow", "Reminder"))
        self.return_button.setText(_translate("MainWindow", "Return"))

class Reminder(QMainWindow):
    def __init__(self):
        super(Reminder, self).__init__()
        self.setupUi(self)
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(733, 538)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("* {\n"
"  border: none;\n"
"  background-color: transparent;\n"
"  color: #FFF; /* Specify a default color */\n"
"}\n"
"\n"
"#centralwidget {\n"
"  background-color: white\n"
";\n"
"}\n"
"\n"
"#side_menu {\n"
"  background-color: #071e26;\n"
"  border-radius: 20px;\n"
"}\n"
"\n"
"QPushButton {\n"
"  padding: 10px;\n"
"  background-color: #071e26;\n"
"  border-radius: 5px;\n"
"}\n"
"\n"
"#main_body {\n"
"  background-color: #071e26;\n"
"  border-radius: 10px;\n"
"}\n"
"")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.header = QtWidgets.QFrame(self.centralwidget)
        self.header.setMinimumSize(QtCore.QSize(0, 70))
        self.header.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.header.setFrameShadow(QtWidgets.QFrame.Raised)
        self.header.setObjectName("header")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.header)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame = QtWidgets.QFrame(self.header)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setMinimumSize(QtCore.QSize(120, 60))
        self.pushButton.setMaximumSize(QtCore.QSize(16777215, 30))
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setStyleSheet("\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"         \n"
"\n"
"            ")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/icons_folder/align-justify.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(24, 24))
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_3.addWidget(self.pushButton, 0, QtCore.Qt.AlignTop)
        self.horizontalLayout_2.addWidget(self.frame, 0, QtCore.Qt.AlignLeft)
        self.frame_3 = QtWidgets.QFrame(self.header)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.label.setFont(font)
        self.label.setStyleSheet("color: black;")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout_4.addWidget(self.label)
        self.horizontalLayout_2.addWidget(self.frame_3)
        self.verticalLayout.addWidget(self.header, 0, QtCore.Qt.AlignTop)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_2.sizePolicy().hasHeightForWidth())
        self.frame_2.setSizePolicy(sizePolicy)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.side_menu = QtWidgets.QWidget(self.frame_2)
        self.side_menu.setMinimumSize(QtCore.QSize(0, 0))
        self.side_menu.setObjectName("side_menu")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.side_menu)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame_4 = QtWidgets.QFrame(self.side_menu)
        self.frame_4.setMinimumSize(QtCore.QSize(180, 0))
        self.frame_4.setMaximumSize(QtCore.QSize(150, 16777215))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Home_button = QtWidgets.QPushButton(self.frame_4)
        self.Home_button.setMinimumSize(QtCore.QSize(0, 80))
        self.Home_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Home_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"         \n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/icons_folder/home.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Home_button.setIcon(icon1)
        self.Home_button.setIconSize(QtCore.QSize(20, 20))
        self.Home_button.setObjectName("Home_button")
        self.verticalLayout_3.addWidget(self.Home_button)
        self.Daily_button = QtWidgets.QPushButton(self.frame_4)
        self.Daily_button.setMinimumSize(QtCore.QSize(0, 80))
        self.Daily_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Daily_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"\n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/icons_folder/file-text.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Daily_button.setIcon(icon2)
        self.Daily_button.setIconSize(QtCore.QSize(20, 20))
        self.Daily_button.setObjectName("Daily_button")
        self.verticalLayout_3.addWidget(self.Daily_button)
        self.Weekly_button = QtWidgets.QPushButton(self.frame_4)
        self.Weekly_button.setMinimumSize(QtCore.QSize(0, 80))
        self.Weekly_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Weekly_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"\n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        self.Weekly_button.setIcon(icon2)
        self.Weekly_button.setIconSize(QtCore.QSize(20, 20))
        self.Weekly_button.setObjectName("Weekly_button")
        self.verticalLayout_3.addWidget(self.Weekly_button)
        self.Reminder_button = QtWidgets.QPushButton(self.frame_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Reminder_button.sizePolicy().hasHeightForWidth())
        self.Reminder_button.setSizePolicy(sizePolicy)
        self.Reminder_button.setMinimumSize(QtCore.QSize(20, 80))
        self.Reminder_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Reminder_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"         \n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/icons_folder/calendar.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Reminder_button.setIcon(icon3)
        self.Reminder_button.setIconSize(QtCore.QSize(20, 20))
        self.Reminder_button.setObjectName("Reminder_button")
        self.verticalLayout_3.addWidget(self.Reminder_button)
        self.return_button = QtWidgets.QPushButton(self.frame_4)
        self.return_button.setMinimumSize(QtCore.QSize(0, 80))
        self.return_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.return_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"         \n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/icons_folder/arrow-left.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.return_button.setIcon(icon4)
        self.return_button.setIconSize(QtCore.QSize(20, 20))
        self.return_button.setObjectName("return_button")
        self.verticalLayout_3.addWidget(self.return_button)
        self.verticalLayout_2.addWidget(self.frame_4)
        self.horizontalLayout.addWidget(self.side_menu)
        self.main_body = QtWidgets.QFrame(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.main_body.sizePolicy().hasHeightForWidth())
        self.main_body.setSizePolicy(sizePolicy)
        self.main_body.setStyleSheet("")
        self.main_body.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.main_body.setFrameShadow(QtWidgets.QFrame.Raised)
        self.main_body.setObjectName("main_body")
        self.gridLayout = QtWidgets.QGridLayout(self.main_body)
        self.gridLayout.setObjectName("gridLayout")
        self.calendar_frame = QtWidgets.QFrame(self.main_body)
        self.calendar_frame.setStyleSheet("background-color: transparent;\n"
"border-radius:7px;")
        self.calendar_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.calendar_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.calendar_frame.setObjectName("calendar_frame")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.calendar_frame)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.calendarWidget = QtWidgets.QCalendarWidget(self.calendar_frame)
        self.calendarWidget.setStyleSheet("color: rgb(85, 255, 255);\n"
"font-size:28px;\n"
"font-weight:700;\n"
"font-family: \'Istok Web\';\n"
"alternate-background-color: rgb(0, 0, 0);")
        self.calendarWidget.setObjectName("calendarWidget")
        self.gridLayout_3.addWidget(self.calendarWidget, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.calendar_frame, 0, 0, 1, 1)
        self.task_frame = QtWidgets.QFrame(self.main_body)
        self.task_frame.setMaximumSize(QtCore.QSize(550, 16777215))
        self.task_frame.setStyleSheet("background-color: transparent;\n"
"border-radius:7px;")
        self.task_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.task_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.task_frame.setObjectName("task_frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.task_frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.addButton = QtWidgets.QPushButton(self.task_frame)
        self.addButton.setMinimumSize(QtCore.QSize(10, 0))
        self.addButton.setMaximumSize(QtCore.QSize(150, 16777215))
        self.addButton.setBaseSize(QtCore.QSize(0, 0))
        self.addButton.setStyleSheet("background-color: rgb(85, 255, 255);\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"font-family: \'Istok Web\';\n"
"font-style: normal;\n"
"font-weight: 700;\n"
"font-size:12 px;\n"
"color:#071e26;\n"
"border-radius:5px\n"
"\n"
"\n"
"")
        self.addButton.setAutoDefault(False)
        self.addButton.setObjectName("addButton")
        self.gridLayout_2.addWidget(self.addButton, 0, 0, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.task_frame)
        self.lineEdit.setMinimumSize(QtCore.QSize(0, 50))
        font = QtGui.QFont()
        font.setFamily("Istok Web")
        font.setPointSize(-1)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color:black;\n"
"font-family: \'Istok Web\';\n"
"border-radius:5px;\n"
"letter-spacing:1px;\n"
"font-size:18px;\n"
"padding-left:4px;\n"
"font-weight:400;")
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout_2.addWidget(self.lineEdit, 1, 0, 1, 1)
        self.tasksListWidget = QtWidgets.QListWidget(self.task_frame)
        self.tasksListWidget.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: black;\n"
"font-family: \'Istok Web\';\n"
"font-size:24px;\n"
"font-weight:500;")
        self.tasksListWidget.setObjectName("tasksListWidget")
        item = QtWidgets.QListWidgetItem()
        self.tasksListWidget.addItem(item)
        self.gridLayout_2.addWidget(self.tasksListWidget, 2, 0, 1, 1)
        self.saveButton = QtWidgets.QPushButton(self.task_frame)
        self.saveButton.setStyleSheet("background-color: rgb(85, 255, 255);\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"font-family: \'Istok Web\';\n"
"font-style: normal;\n"
"font-weight: 700;\n"
"font-size:12 px;\n"
"color:#071e26;\n"
"\n"
"\n"
"\n"
"")
        self.saveButton.setObjectName("saveButton")
        self.gridLayout_2.addWidget(self.saveButton, 3, 0, 1, 1)
        self.gridLayout.addWidget(self.task_frame, 0, 1, 1, 1)
        self.horizontalLayout.addWidget(self.main_body)
        self.main_body.raise_()
        self.side_menu.raise_()
        self.verticalLayout.addWidget(self.frame_2)
        MainWindow.setCentralWidget(self.centralwidget)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.menu_expanded = False


        # Connect the button click event to the toggle_menu function
        self.pushButton.clicked.connect(self.toggle_menu)


        # Set up the animation for the side menu
        self.side_menu_animation = QtCore.QPropertyAnimation(self.side_menu, b"maximumWidth")
        self.side_menu_animation.setDuration(300)


        # Set up the central widget animation for overlay effect
        self.central_widget_animation = QtCore.QPropertyAnimation(self.centralwidget, b"geometry")
        self.central_widget_animation.setDuration(300)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.conn = sqlite3.connect('app_screen_time.db')
        self.cursor = self.conn.cursor()
        self.calendarWidget.selectionChanged.connect(self.calendarDateChanged)
        self.calendarDateChanged()
        self.saveButton.clicked.connect(self.saveChanges)
        self.addButton.clicked.connect(self.addNewTask)
        self.Home_button.clicked.connect(self.home_clicked)
        self.Daily_button.clicked.connect(self.daily_clicked)
        self.Weekly_button.clicked.connect(self.weekly_clicked)
        self.Reminder_button.clicked.connect(self.reminder_clicked)
        self.return_button.clicked.connect(self.return_button_clicked)
    
    def home_clicked(self):
        home = Landing()
        widget.addWidget(home)
        widget.setCurrentIndex(widget.currentIndex() + 1)
        
    def daily_clicked(self):
        daily = daily_report()
        widget.addWidget(daily)
        widget.setCurrentIndex(widget.currentIndex() + 1)
        daily.pie_chart_canvas.draw()
        
    def reminder_clicked(self):
        rem = Reminder()
        widget.addWidget(rem)
        widget.setCurrentIndex(widget.currentIndex() +1)
        
    def weekly_clicked(self):
        week = Weekly()
        widget.addWidget(week)
        widget.setCurrentIndex(widget.currentIndex() + 1)
        
    def return_button_clicked(self):
        if widget.currentIndex() > 0:
            widget.removeWidget(widget.currentWidget())
            # Set the index to the previous widget
            widget.setCurrentIndex(widget.currentIndex() - 1)
    
    def calendarDateChanged(self):
            dateSelected = self.calendarWidget.selectedDate().toPyDate()
            # print("Date selected:", dateSelected)
            self.updateTaskList(dateSelected)
           


    def updateTaskList(self, date):
        self.tasksListWidget.clear()


        query = "SELECT task, completed FROM tasks WHERE date = ?"
        row = (date,)
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS tasks (
                            task TEXT,
                            completed TEXT,
                            date TEXT
                        )''')
        results = self.cursor.execute(query, row).fetchall()
        for result in results:
            item = QListWidgetItem(str(result[0]))
            item.setFlags(item.flags() | Qt.ItemIsUserCheckable)
            if result[1] == "YES":
                item.setCheckState(Qt.Checked)
            elif result[1] == "NO":
                item.setCheckState(Qt.Unchecked)
            self.tasksListWidget.addItem(item)


    def saveChanges(self):
        date = self.calendarWidget.selectedDate().toPyDate()


        for i in range(self.tasksListWidget.count()):
            item = self.tasksListWidget.item(i)
            task = item.text()
            if item.checkState() == Qt.Checked:
                query = "UPDATE tasks SET completed = 'YES' WHERE task = ? AND date = ?"
            else:
                query = "UPDATE tasks SET completed = 'NO' WHERE task = ? AND date = ?"
            row = (task, date,)
            self.cursor.execute(query, row)
        self.conn.commit()


        messageBox = QMessageBox()
        messageBox.setText("Changes saved.")
        messageBox.setStandardButtons(QMessageBox.Ok)
        messageBox.exec()


    def addNewTask(self):
        newTask = str(self.lineEdit.text())  # Use self.lineEdit.text() instead of self.taskLineEdit.text()
        date = self.calendarWidget.selectedDate().toPyDate()


        query = "INSERT INTO tasks(task, completed, date) VALUES (?,?,?)"
        row = (newTask, "NO", date,)


        try:
            self.cursor.execute(query, row)
            self.conn.commit()
            self.updateTaskList(date)
            self.lineEdit.clear()  # Clear the lineEdit widget
        except Exception as e:
            print(f"An error occurred: {e}")




    def closeEvent(self, event):
        self.conn.close()
        event.accept()
    def toggle_menu(self):
        # Toggle the menu state
        self.menu_expanded = not self.menu_expanded


        # Define the target width for the side menu
        target_width = 200 if self.menu_expanded else 0


        # Update the side menu animation
        self.side_menu_animation.setEndValue(target_width)
        self.side_menu_animation.start()


        # Update the central widget animation for overlay effect
        if self.menu_expanded:
            self.central_widget_animation.setEndValue(QtCore.QRect(200, 0, 586, 370))
        else:
            self.central_widget_animation.setEndValue(QtCore.QRect(0, 0, 586, 370))
        self.central_widget_animation.start()

    
                   
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Menu"))
        self.label.setText(_translate("MainWindow", "Samadhan App"))
        self.Home_button.setText(_translate("MainWindow", "Home"))
        self.Daily_button.setText(_translate("MainWindow", "Daily"))
        self.Weekly_button.setText(_translate("MainWindow", "Weekly"))
        self.Reminder_button.setText(_translate("MainWindow", "Reminder"))
        self.return_button.setText(_translate("MainWindow", "Return"))
        self.addButton.setText(_translate("MainWindow", "Add New"))
        __sortingEnabled = self.tasksListWidget.isSortingEnabled()
        self.tasksListWidget.setSortingEnabled(False)
        item = self.tasksListWidget.item(0)
        item.setText(_translate("MainWindow", "hello"))
        self.tasksListWidget.setSortingEnabled(__sortingEnabled)
        self.saveButton.setText(_translate("MainWindow", "Save Changes"))


class daily_report(QMainWindow):
    def __init__(self):
        super(daily_report, self).__init__()
        self.setupUi(self)
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update)
        self.timer.start(1000)
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(586, 538)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("* {\n"
                                         "  border: none;\n"
                                         "  background-color: transparent;\n"
                                         "  color: #FFF; /* Specify a default color */\n"
                                         "}\n"
                                         "\n"
                                         "#centralwidget {\n"
                                         "  background-color: white\n"
                                         ";\n"
                                         "}\n"
                                         "\n"
                                         "#side_menu {\n"
                                         "  background-color: #071e26;\n"
                                         "  border-radius: 20px;\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton {\n"
                                         "  padding: 10px;\n"
                                         "  background-color: #071e26;\n"
                                         "  border-radius: 5px;\n"
                                         "}\n"
                                         "\n"
                                         "#main_body {\n"
                                         "  background-color: #071e26;\n"
                                         "  border-radius: 10px;\n"
                                         "}\n"
                                         "")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.header = QtWidgets.QFrame(self.centralwidget)
        self.header.setMinimumSize(QtCore.QSize(0, 70))
        self.header.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.header.setFrameShadow(QtWidgets.QFrame.Raised)
        self.header.setObjectName("header")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.header)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame = QtWidgets.QFrame(self.header)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setMinimumSize(QtCore.QSize(120, 60))
        self.pushButton.setMaximumSize(QtCore.QSize(16777215, 30))
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setStyleSheet("\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"         \n"
"\n"
"            ")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/icons_folder/align-justify.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(24, 24))
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_3.addWidget(self.pushButton, 0, QtCore.Qt.AlignTop)
        self.horizontalLayout_2.addWidget(self.frame, 0, QtCore.Qt.AlignLeft)
        self.frame_3 = QtWidgets.QFrame(self.header)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStrikeOut(False)    
        self.label.setFont(font)
        self.label.setStyleSheet("color: black;")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout_4.addWidget(self.label)
        self.horizontalLayout_2.addWidget(self.frame_3)
        self.verticalLayout.addWidget(self.header, 0, QtCore.Qt.AlignTop)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_2.sizePolicy().hasHeightForWidth())
        self.frame_2.setSizePolicy(sizePolicy)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.side_menu = QtWidgets.QWidget(self.frame_2)
        self.side_menu.setMinimumSize(QtCore.QSize(0, 0))
        self.side_menu.setObjectName("side_menu")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.side_menu)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame_4 = QtWidgets.QFrame(self.side_menu)
        self.frame_4.setMinimumSize(QtCore.QSize(180, 0))
        self.frame_4.setMaximumSize(QtCore.QSize(150, 16777215))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Home_button = QtWidgets.QPushButton(self.frame_4)
        self.Home_button.setMinimumSize(QtCore.QSize(0, 80))
        self.Home_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Home_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"         \n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/icons_folder/home.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Home_button.setIcon(icon1)
        self.Home_button.setIconSize(QtCore.QSize(20, 20))
        self.Home_button.setObjectName("Home_button")
        self.verticalLayout_3.addWidget(self.Home_button)
        self.Daily_button = QtWidgets.QPushButton(self.frame_4)
        self.Daily_button.setMinimumSize(QtCore.QSize(0, 80))
        self.Daily_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Daily_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"\n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/icons_folder/file-text.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Daily_button.setIcon(icon2)
        self.Daily_button.setIconSize(QtCore.QSize(20, 20))
        self.Daily_button.setObjectName("Daily_button")
        self.verticalLayout_3.addWidget(self.Daily_button)
        self.Weekly_button = QtWidgets.QPushButton(self.frame_4)
        self.Weekly_button.setMinimumSize(QtCore.QSize(0, 80))
        self.Weekly_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Weekly_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"\n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        self.Weekly_button.setIcon(icon2)
        self.Weekly_button.setIconSize(QtCore.QSize(20, 20))
        self.Weekly_button.setObjectName("Weekly_button")
        self.verticalLayout_3.addWidget(self.Weekly_button)
        self.Reminder_button = QtWidgets.QPushButton(self.frame_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Reminder_button.sizePolicy().hasHeightForWidth())
        self.Reminder_button.setSizePolicy(sizePolicy)
        self.Reminder_button.setMinimumSize(QtCore.QSize(20, 80))
        self.Reminder_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Reminder_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"         \n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/icons_folder/calendar.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Reminder_button.setIcon(icon3)
        self.Reminder_button.setIconSize(QtCore.QSize(20, 20))
        self.Reminder_button.setObjectName("Reminder_button")
        self.verticalLayout_3.addWidget(self.Reminder_button)
        self.return_button = QtWidgets.QPushButton(self.frame_4)
        self.return_button.setMinimumSize(QtCore.QSize(0, 80))
        self.return_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.return_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"         \n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/icons_folder/arrow-left.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.return_button.setIcon(icon4)
        self.return_button.setIconSize(QtCore.QSize(20, 20))
        self.return_button.setObjectName("return_button")
        self.verticalLayout_3.addWidget(self.return_button)
        self.verticalLayout_2.addWidget(self.frame_4)
        self.horizontalLayout.addWidget(self.side_menu)
        self.main_body = QtWidgets.QFrame(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.main_body.sizePolicy().hasHeightForWidth())
        self.main_body.setSizePolicy(sizePolicy)
        self.main_body.setStyleSheet("padding:10px;")
        self.main_body.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.main_body.setFrameShadow(QtWidgets.QFrame.Raised)
        self.main_body.setObjectName("main_body")
        self.gridLayout = QtWidgets.QGridLayout(self.main_body)
        self.gridLayout.setObjectName("gridLayout")
        self.bar_graph_frame = QtWidgets.QFrame(self.main_body)
        self.bar_graph_frame.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                            "border-radius:7px;")
        self.bar_graph_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.bar_graph_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.bar_graph_frame.setObjectName("bar_graph_frame")

        # Create a QVBoxLayout for the bar_graph_frame
        bar_layout = QtWidgets.QVBoxLayout(self.bar_graph_frame)
        apps = self.daily_summary()[0]
        time = self.daily_summary()[1]
        time_opened = self.daily_summary()[2]
        time_closed = self.daily_summary()[3]
        self.Task_1 = QtWidgets.QLabel(self.bar_graph_frame)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.Task_1.setFont(font)
        self.Task_1.setText(f"First Pickup at : {time_opened}")
        self.Task_1.setStyleSheet("background-color: white;\n"
                                    "border:5px solid white;\n"
                                    "border-radius:7px;\n"
                                    "font-family:Helvetica;\n"
                                    "color:black;\n"
                                    "font-weight:600;")
        self.Task_1.setAlignment(QtCore.Qt.AlignCenter)
        self.Task_1.setObjectName("Task_1")

        # Create another QLabel Task_2
        self.Task_2 = QtWidgets.QLabel(self.bar_graph_frame)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.Task_2.setFont(font)
        self.Task_2.setText(f"Last drop off at : {time_closed}")
        self.Task_2.setStyleSheet("background-color: white;\n"
                                    "border:5px solid white;\n"
                                    "border-radius:7px;\n"
                                    "font-family:Helvetica;\n"
                                    "color:black;\n"
                                    "font-weight:600;")
        self.Task_2.setAlignment(QtCore.Qt.AlignCenter)
        self.Task_2.setObjectName("Task_2")

        # Add the QLabels to the QVBoxLayout
        bar_layout.addWidget(self.Task_1)
        bar_layout.addWidget(self.Task_2)

        
        

        # Create and add multiple QLabels using a loop
        for i in range(5):
            task_label = QtWidgets.QLabel(self.bar_graph_frame)
            font = QtGui.QFont()
            font.setFamily("Times New Roman")
            font.setPointSize(14)
            font.setBold(True)
            font.setWeight(75)
            task_label.setFont(font)
            task_label.setText(f" {time[i]}           {apps[i]}")  # Example text
            task_label.setStyleSheet("background-color: white;\n"
                                        "border:5px solid white;\n"
                                        "border-radius:7px;\n"
                                        "font-family:Georgia;\n"
                                        "color:black;\n"
                                        "font-weight:300;")
            task_label.setAlignment(QtCore.Qt.AlignLeft)
            task_label.setObjectName(f"Task_{i+1}")

            # Add the QLabel to the QVBoxLayout
            bar_layout.addWidget(task_label)


        # Add the QVBoxLayout to the grid layout
        self.gridLayout.addWidget(self.bar_graph_frame, 0, 1, 1, 1)
        self.pie_chart_frame = QtWidgets.QFrame(self.main_body)


        self.pie_chart_frame.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                            "border-radius:7px;")
        self.pie_chart_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.pie_chart_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.pie_chart_frame.setObjectName("pie_chart_frame")
        self.gridLayout.addWidget(self.pie_chart_frame, 0, 0, 1, 1)
        self.horizontalLayout.addWidget(self.main_body)
        self.main_body.raise_()
        self.side_menu.raise_()
        self.verticalLayout.addWidget(self.frame_2)
        MainWindow.setCentralWidget(self.centralwidget)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        # Integrate pie chart into the pie_chart_frame
        self.pie_chart_canvas = FigureCanvas(plt.figure())
        self.gridLayoutPie = QtWidgets.QGridLayout(self.pie_chart_frame)
        self.gridLayoutPie.addWidget(self.pie_chart_canvas)
       
        self.conn = sqlite3.connect('app_screen_time.db')
        self.cursor = self.conn.cursor()
       
        self.Home_button.clicked.connect(self.home_clicked)
        self.Daily_button.clicked.connect(self.daily_clicked)
        self.Weekly_button.clicked.connect(self.weekly_clicked)
        self.Reminder_button.clicked.connect(self.reminder_clicked)
        self.return_button.clicked.connect(self.return_button_clicked)
    
    def daily_summary(self):
        conn = sqlite3.connect('app_screen_time.db')
        cursor = conn.cursor()

        current_day = datetime.datetime.now().strftime('%A')

        query = '''
            SELECT MIN(time_opened) AS least_time_opened, MAX(time_closed) AS greatest_time_closed
            FROM timeline
            WHERE Day = ?
        '''
        cursor.execute(query, (current_day,))
        
        result = cursor.fetchone()
        least_time_opened, greatest_time_closed = result

                

        
        query = """
        SELECT * FROM screen_time where Day = ? 
        group by app_name 
        order by total_screen_time DESC
        LIMIT 5;
        """

        # Execute the query with the current day as a parameter
        cursor.execute(query, (current_day,))
        results = cursor.fetchall()
        application = []
        time = []
        # Print the top 10 results
        if results:
            
            for app, total_time, day in results:
                application.append(app)
                if total_time >= 3600:
                    hours = total_time // 3600
                    minutes = (total_time % 3600) // 60
                    app_time = f"{hours}h {minutes}m"
                    time.append(app_time)
                elif total_time >= 60:
                    minutes = total_time // 60
                    app_time = f"{minutes}m"
                    time.append(app_time)
                else:
                    app_time = f"{total_time}s"
                    time.append(app_time)
            
        else:
            print(f"No screen time data found for {current_day}")

        return application,time,least_time_opened,greatest_time_closed

    def home_clicked(self):
        home = Landing()
        widget.addWidget(home)
        widget.setCurrentIndex(widget.currentIndex() + 1)
        
    def daily_clicked(self):
        daily = daily_report()
        widget.addWidget(daily)
        widget.setCurrentIndex(widget.currentIndex() + 1)
        daily.pie_chart_canvas.draw()
                
    def reminder_clicked(self):
        rem = Reminder()
        widget.addWidget(rem)
        widget.setCurrentIndex(widget.currentIndex() +1)
        
    def weekly_clicked(self):
        week = Weekly()
        widget.addWidget(week)
        widget.setCurrentIndex(widget.currentIndex() + 1)
        
    def return_button_clicked(self):
        if widget.currentIndex() > 0:
            widget.removeWidget(widget.currentWidget())
            # Set the index to the previous widget
            widget.setCurrentIndex(widget.currentIndex() - 1)


    def update(self, frame=None):
        today_day_of_week = datetime.datetime.now().strftime('%A')
        data = self.fetch_apps_used_today(self.cursor, today_day_of_week)

        if not data:
            print(f"No data available for {today_day_of_week}.")
            return

        total_time = sum(row[1] for row in data)
        labels = []
        sizes = []
        for row in data:
            if row[1] / total_time >= 0.05:
                labels.append(row[0])
                sizes.append(row[1])

        other_apps_time = total_time - sum(sizes)
        if other_apps_time > 0:
            labels.append('Others')
            sizes.append(other_apps_time)

        # Clear the pie chart canvas
        self.pie_chart_canvas.figure.clear()

        # Plot the updated pie chart
        wedges, _, _ = self.pie_chart_canvas.figure.gca().pie(
            sizes, labels=None, autopct='%1.1f%%', pctdistance=0.85, startangle=90,
            explode=[0.1 if i == sizes.index(max(sizes)) else 0 for i in range(len(labels))],
            colors=plt.cm.tab20c(np.arange(len(labels))), wedgeprops=dict(width=0.4))
        
        centre_circle = Circle((0, 0), 0.6, color='white', linewidth=1.25)
        self.pie_chart_canvas.figure.gca().add_artist(centre_circle)

        total_time_str = self.format_time(total_time)
        self.pie_chart_canvas.figure.gca().text(0, 0, total_time_str, ha='center', va='center', fontsize=14, color='#4A90E2')

        self.pie_chart_canvas.figure.gca().set_title(f"Apps Used on {today_day_of_week}", loc="left", fontsize=18, weight='light', color='#4A90E2', fontname='DejaVu Sans')

        legend_without_labels = self.pie_chart_canvas.figure.gca().legend(wedges, labels, title='', loc="upper center", bbox_to_anchor=(0.5, 1.15), ncol=len(labels), fontsize='small')
        self.pie_chart_canvas.figure.gca().add_artist(legend_without_labels)

        self.pie_chart_canvas.figure.gca().axis('equal')

        # Redraw the canvas to reflect the changes
        self.pie_chart_canvas.draw()


    def fetch_apps_used_today(self, cursor, today_day_of_week):
        cursor.execute("SELECT app_name, SUM(total_screen_time) FROM screen_time WHERE Day = ? GROUP BY app_name", (today_day_of_week,))
        return cursor.fetchall()


    def format_time(self, seconds):
        hours, remainder = divmod(seconds, 3600)
        minutes, seconds = divmod(remainder, 60)


        if hours >= 1:
            return f"{int(hours)} h {int(minutes)} min {int(seconds)} sec"
        elif minutes >= 1:
            return f"{int(minutes)} min {int(seconds)} sec"
        else:
            return f"{int(seconds)} sec"
   
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Menu"))
        self.label.setText(_translate("MainWindow", "Samadhan App"))
        self.Home_button.setText(_translate("MainWindow", "Home"))
        self.Daily_button.setText(_translate("MainWindow", "Daily"))
        self.Weekly_button.setText(_translate("MainWindow", "Weekly"))
        self.Reminder_button.setText(_translate("MainWindow", "Reminder"))
        self.return_button.setText(_translate("MainWindow", "Return"))

class Weekly(QMainWindow):
   
    def __init__(self):
        super(Weekly, self).__init__()
        self.setupUi(self)
        self.setupBarGraphAnimation()  
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(586, 455)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("* {\n"
"  border: none;\n"
"  background-color: transparent;\n"
"  color: #FFF; /* Specify a default color */\n"
"}\n"
"\n"
"#centralwidget {\n"
"  background-color: white\n"
";\n"
"}\n"
"\n"
"#side_menu {\n"
"  background-color: #071e26;\n"
"  border-radius: 20px;\n"
"}\n"
"\n"
"QPushButton {\n"
"  padding: 10px;\n"
"  background-color: #071e26;\n"
"  border-radius: 5px;\n"
"}\n"
"\n"
"#main_body {\n"
"  background-color: #071e26;\n"
"  border-radius: 10px;\n"
"}\n"
"")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.header = QtWidgets.QFrame(self.centralwidget)
        self.header.setMinimumSize(QtCore.QSize(0, 70))
        self.header.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.header.setFrameShadow(QtWidgets.QFrame.Raised)
        self.header.setObjectName("header")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.header)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame = QtWidgets.QFrame(self.header)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setMinimumSize(QtCore.QSize(120, 60))
        self.pushButton.setMaximumSize(QtCore.QSize(16777215, 30))
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setStyleSheet("\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"         \n"
"\n"
"            ")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/icons_folder/align-justify.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(24, 24))
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_3.addWidget(self.pushButton, 0, QtCore.Qt.AlignTop)
        self.horizontalLayout_2.addWidget(self.frame, 0, QtCore.Qt.AlignLeft)
        self.frame_3 = QtWidgets.QFrame(self.header)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.label.setFont(font)
        self.label.setStyleSheet("color: black;")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout_4.addWidget(self.label)
        self.horizontalLayout_2.addWidget(self.frame_3)
        self.verticalLayout.addWidget(self.header, 0, QtCore.Qt.AlignTop)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_2.sizePolicy().hasHeightForWidth())
        self.frame_2.setSizePolicy(sizePolicy)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.side_menu = QtWidgets.QWidget(self.frame_2)
        self.side_menu.setMinimumSize(QtCore.QSize(0, 0))
        self.side_menu.setObjectName("side_menu")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.side_menu)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame_4 = QtWidgets.QFrame(self.side_menu)
        self.frame_4.setMinimumSize(QtCore.QSize(150, 0))
        self.frame_4.setMaximumSize(QtCore.QSize(150, 16777215))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Home_button = QtWidgets.QPushButton(self.frame_4)
        self.Home_button.setMinimumSize(QtCore.QSize(0, 80))
        self.Home_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Home_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"         \n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/icons_folder/home.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Home_button.setIcon(icon1)
        self.Home_button.setIconSize(QtCore.QSize(20, 20))
        self.Home_button.setObjectName("Home_button")
        self.verticalLayout_3.addWidget(self.Home_button)
        self.Daily_button = QtWidgets.QPushButton(self.frame_4)
        self.Daily_button.setMinimumSize(QtCore.QSize(0, 80))
        self.Daily_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Daily_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"\n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/icons_folder/file-text.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Daily_button.setIcon(icon2)
        self.Daily_button.setIconSize(QtCore.QSize(20, 20))
        self.Daily_button.setObjectName("Daily_button")
        self.verticalLayout_3.addWidget(self.Daily_button)
        self.Weekly_button = QtWidgets.QPushButton(self.frame_4)
        self.Weekly_button.setMinimumSize(QtCore.QSize(0, 80))
        self.Weekly_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Weekly_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"\n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        self.Weekly_button.setIcon(icon2)
        self.Weekly_button.setIconSize(QtCore.QSize(20, 20))
        self.Weekly_button.setObjectName("Weekly_button")
        self.verticalLayout_3.addWidget(self.Weekly_button)
        self.Reminder_button = QtWidgets.QPushButton(self.frame_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Reminder_button.sizePolicy().hasHeightForWidth())
        self.Reminder_button.setSizePolicy(sizePolicy)
        self.Reminder_button.setMinimumSize(QtCore.QSize(20, 80))
        self.Reminder_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Reminder_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"         \n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/icons_folder/calendar.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Reminder_button.setIcon(icon3)
        self.Reminder_button.setIconSize(QtCore.QSize(20, 20))
        self.Reminder_button.setObjectName("Reminder_button")
        self.verticalLayout_3.addWidget(self.Reminder_button)
        self.return_button = QtWidgets.QPushButton(self.frame_4)
        self.return_button.setMinimumSize(QtCore.QSize(0, 80))
        self.return_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.return_button.setStyleSheet("QPushButton {\n"
"                font-family: \'Istok Web\';\n"
"                font-weight: 700;\n"
"                font-size: 20px;\n"
"         \n"
"\n"
"            }\n"
"            QPushButton:hover {\n"
"background-color:rgb(5, 171, 232    );    \n"
"            }\n"
"        \"\"")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/icons_folder/arrow-left.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.return_button.setIcon(icon4)
        self.return_button.setIconSize(QtCore.QSize(20, 20))
        self.return_button.setObjectName("return_button")
        self.verticalLayout_3.addWidget(self.return_button)      
        self.verticalLayout_2.addWidget(self.frame_4)
        self.horizontalLayout.addWidget(self.side_menu)
        self.main_body = QtWidgets.QFrame(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.main_body.sizePolicy().hasHeightForWidth())
        self.main_body.setSizePolicy(sizePolicy)
        self.main_body.setStyleSheet("")
        self.main_body.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.main_body.setFrameShadow(QtWidgets.QFrame.Raised)
        self.main_body.setObjectName("main_body")
        self.gridLayout = QtWidgets.QGridLayout(self.main_body)
        self.gridLayout.setObjectName("gridLayout")
        self.pie_chart_frame = QtWidgets.QFrame(self.main_body)
        self.pie_chart_frame.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:7px;")
        self.pie_chart_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.pie_chart_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.pie_chart_frame.setObjectName("pie_chart_frame")
       
        self.plot_most_used_apps_pie()
       
        self.gridLayout.addWidget(self.pie_chart_frame, 0, 0, 1, 1)
        self.bar_graph_frame = QtWidgets.QFrame(self.main_body)
        self.bar_graph_frame.setMinimumSize(QtCore.QSize(0, 200))
        self.bar_graph_frame.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:7px;")
        self.bar_graph_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.bar_graph_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.bar_graph_frame.setObjectName("bar_graph_frame")
       
        # self.setupBarGraphAnimation()  
       
        self.gridLayout.addWidget(self.bar_graph_frame, 0, 1, 1, 1)
        self.line_graph_frame = QtWidgets.QFrame(self.main_body)
        self.line_graph_frame.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:7px;")
        self.line_graph_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.line_graph_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line_graph_frame.setObjectName("line_graph_frame")
        self.line_graph_frame.setMinimumHeight(420)
        self.gridLayout.addWidget(self.line_graph_frame, 1, 0, 1, 2)
        self.setupLineGraph()
        self.horizontalLayout.addWidget(self.main_body)
        self.main_body.raise_()
        self.side_menu.raise_()
        self.verticalLayout.addWidget(self.frame_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.Home_button.clicked.connect(self.home_clicked)
        self.Daily_button.clicked.connect(self.daily_clicked)
        self.Weekly_button.clicked.connect(self.weekly_clicked)
        self.Reminder_button.clicked.connect(self.reminder_clicked)
        self.return_button.clicked.connect(self.return_button_clicked)
    
    def home_clicked(self):
        home = Landing()
        widget.addWidget(home)
        widget.setCurrentIndex(widget.currentIndex() + 1)
        
    def daily_clicked(self):
        daily = daily_report()
        widget.addWidget(daily)
        widget.setCurrentIndex(widget.currentIndex() + 1)
        daily.pie_chart_canvas.draw()
        
    def reminder_clicked(self):
        rem = Reminder()
        widget.addWidget(rem)
        widget.setCurrentIndex(widget.currentIndex() +1)
        
    def weekly_clicked(self):
        week = Weekly()
        widget.addWidget(week)
        widget.setCurrentIndex(widget.currentIndex() + 1)
        # week.setupBarGraphAnimation()
        
    def return_button_clicked(self):
        if widget.currentIndex() > 0:
            widget.removeWidget(widget.currentWidget())
            # Set the index to the previous widget
            widget.setCurrentIndex(widget.currentIndex() - 1)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Menu"))
        self.label.setText(_translate("MainWindow", "Samadhan App"))
        self.Home_button.setText(_translate("MainWindow", "Home"))
        self.Daily_button.setText(_translate("MainWindow", "Daily"))
        self.Weekly_button.setText(_translate("MainWindow", "Weekly"))
        self.Reminder_button.setText(_translate("MainWindow", "Reminder"))
        self.return_button.setText(_translate("MainWindow", "Return"))  
       
    def setupLineGraph(self):
    # Open the database connection
        conn = sqlite3.connect('app_screen_time.db')
        cursor = conn.cursor()


        top_3_apps = self.get_top_3_apps(cursor)  # Pass the cursor to get_top_3_apps method
        days_of_week = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
        line_colors = ['#9370DB', 'limegreen', 'skyblue']


        # Matplotlib setup
        self.fig_line, self.ax_line = plt.subplots(figsize=(6, 4))
        self.canvas_line = FigureCanvas(self.fig_line)
        layout = QtWidgets.QVBoxLayout(self.line_graph_frame)
        layout.addWidget(self.canvas_line)


        for i, app_info in enumerate(top_3_apps):
            app_name = app_info[0]
            app_usage = []
            for day in days_of_week:
                cursor.execute("SELECT total_screen_time FROM screen_time WHERE app_name=? AND Day=?", (app_name, day))
                total_time = cursor.fetchone()
                app_usage.append(total_time[0] if total_time else 0)


            # Plotting usage over the week with specified line color and 'o' markers
            self.ax_line.plot(days_of_week, app_usage, label=app_name, marker='o', color=line_colors[i])


        # Set title, labels, legend, and other plot configurations
        title_font = {'family': 'sans-serif', 'weight': 'bold', 'size': 16, 'color': 'black'}
        self.ax_line.set_title('Trend of Most Used Apps Over The Week', fontdict=title_font, loc='left')
        self.ax_line.set_ylabel('Total Screen Time', color='grey')
        self.ax_line.legend(loc='upper left', bbox_to_anchor=(0.7, 1.07), ncol=len(top_3_apps), frameon=False, facecolor='white', edgecolor='white')
        self.ax_line.spines['top'].set_visible(False)
        self.ax_line.spines['right'].set_visible(False)
        self.ax_line.spines['bottom'].set_visible(True)
        self.ax_line.spines['left'].set_visible(False)
        plt.tick_params(axis='both', colors='grey')
        plt.grid(axis='y', linestyle='-', alpha=0.7)
        self.canvas_line.draw()


        # Close the database connection
        conn.close()


    def get_top_3_apps(self, cursor):
        cursor.execute("SELECT app_name, SUM(total_screen_time) AS total_time FROM screen_time GROUP BY app_name ORDER BY total_time DESC LIMIT 3")
        top_3_apps = cursor.fetchall()
        return top_3_apps
   
    def setupBarGraphAnimation(self):
        self.conn = sqlite3.connect('app_screen_time.db')
        self.fig, self.ax = plt.subplots()
        self.canvas = FigureCanvas(self.fig)
        layout = QtWidgets.QVBoxLayout(self.bar_graph_frame)  # Create a layout for bar_graph_frame
        layout.addWidget(self.canvas)  # Add the canvas widget to the layout
        self.ani = animation.FuncAnimation(self.fig, self.update_plot, interval=1000)
        self.canvas.draw()


         
    def format_time(self, seconds):
        if seconds >= 3600:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            return f"{hours}h {minutes}m"
        elif seconds >= 60:
            minutes = seconds // 60
            return f"{minutes}m"
        else:
            return f"{seconds}s"


    def get_screen_time_per_day(self):
        cursor = self.conn.cursor()


        # Get the current day of the week
        today = datetime.datetime.today().strftime('%A')


        # Define the order of days starting from Sunday
        days_order = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']


        # Find the index of the first available day in the database
        first_day_index = days_order.index(today)


        # Reorder the days to start from the first available day
        reordered_days = days_order[first_day_index:] + days_order[:first_day_index]


        # Generate the ORDER BY clause based on the reordered days
        order_by_clause = 'CASE Day '


        for i, day in enumerate(reordered_days, start=1):
            order_by_clause += f'WHEN \'{day}\' THEN {i} '


        order_by_clause += 'END'


        # Execute the SQL query with the dynamically generated ORDER BY clause
        cursor.execute(f"SELECT Day, SUM(total_screen_time) FROM screen_time GROUP BY Day ORDER BY {order_by_clause}")


        data = cursor.fetchall()
        return data




    def update_plot(self, i):
        self.ax.clear()
        data = self.get_screen_time_per_day()
        days = [row[0] for row in data]
        total_screen_time = [row[1] for row in data]
        formatted_times = [self.format_time(time) for time in total_screen_time]
        self.ax.bar(days, total_screen_time, color='skyblue', width=0.6)  # Adjust width as per your preference
        self.ax.set_xlabel('Day of the Week')
        self.ax.set_ylabel('Total Screen Time')
        self.ax.set_title('Total Screen Time per Day')
        self.ax.grid(alpha=0.5)
 # Annotate bars with total screen time
        for x, y, label in zip(days, total_screen_time, formatted_times):
            self.ax.text(x, y, label, ha='center', va='bottom')




    def animate(self):
        ani = animation.FuncAnimation(self.fig, self.update_plot, interval=1000)
        plt.show()
   
       
    def plot_most_used_apps_pie(self):
        conn = sqlite3.connect('app_screen_time.db')
        cursor = conn.cursor()


        cursor.execute("SELECT app_name, SUM(total_screen_time) FROM screen_time GROUP BY app_name")
        data = cursor.fetchall()


        conn.close()


        total_time = sum(row[1] for row in data)
        labels = []
        sizes = []


        for row in data:
            if row[1] / total_time >= 0.05:
                labels.append(row[0])
                sizes.append(row[1])


        other_apps_time = total_time - sum(sizes)
        if other_apps_time > 0:
            labels.append('Others')
            sizes.append(other_apps_time)


        max_index = sizes.index(max(sizes))
        explode = [0.1 if i == max_index else 0 for i in range(len(labels))]


        fig = Figure(figsize=(8, 8))
        ax = fig.add_subplot(111)


        wedges, _, _ = ax.pie(sizes, labels=None, autopct='%1.1f%%', pctdistance=0.85, startangle=90,
                            explode=explode, colors=plt.cm.tab20c(np.arange(len(labels))),
                            wedgeprops=dict(width=0.4))
        total_time = self.format_time(total_time)
        total_time_text = f'Total Screen Time: {(total_time)} seconds'  # Format the total time text


        # Create text element to display total screen time at the center
        ax.text(1.5, -1.3, total_time_text, fontsize=10, weight='bold', color='black', ha='center', va='center')


        legend_without_labels = ax.legend(wedges, labels, title='', loc="upper center", bbox_to_anchor=(0.5, 1.15),
                                        ncol=len(labels), fontsize='small')
        ax.add_artist(legend_without_labels)
        ax.axis('equal')
        ax.text(-1.3, -1.25, "Weekly App Usage Report", fontsize=18, weight='bold', color='#4A90E2', fontname='DejaVu Sans', ha='center')


        canvas = FigureCanvas(fig)
        layout = QtWidgets.QVBoxLayout()  # Create a new layout
        layout.addWidget(canvas)
        self.pie_chart_frame.setLayout(layout)          
 
class PieChartEmailSender:
    def __init__(self, receiver_email):
        self.receiver_email = receiver_email
        self.conn = sqlite3.connect('app_screen_time.db')  # Establish database connection


    def format_time(self, seconds):
        if seconds >= 3600:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            return f"{hours}h {minutes}m"
        elif seconds >= 60:
            minutes = seconds // 60
            return f"{minutes}m"
        else:
            return f"{seconds}s"

    def plot_most_used_apps_pie(self):
        conn = sqlite3.connect('app_screen_time.db')
        cursor = conn.cursor()

        cursor.execute("SELECT app_name, SUM(total_screen_time) FROM screen_time GROUP BY app_name")
        data = cursor.fetchall()

        conn.close()

        total_time = sum(row[1] for row in data)
        labels = []
        sizes = []

        for row in data:
            if row[1] / total_time >= 0.05:
                labels.append(row[0])
                sizes.append(row[1])

        other_apps_time = total_time - sum(sizes)
        if other_apps_time > 0:
            labels.append('Others')
            sizes.append(other_apps_time)

        max_index = sizes.index(max(sizes))
        explode = [0.1 if i == max_index else 0 for i in range(len(labels))]

        fig = Figure(figsize=(8, 8))
        ax = fig.add_subplot(111)

        wedges, _, _ = ax.pie(sizes, labels=None, autopct='%1.1f%%', pctdistance=0.85, startangle=90,
                            explode=explode, colors=plt.cm.tab20c(np.arange(len(labels))),
                            wedgeprops=dict(width=0.4))
        total_time = self.format_time(total_time)
        total_time_text = f'Total Screen Time: {(total_time)} seconds'  # Format the total time text

        # Create text element to display total screen time at the center
        ax.text(1.5, -1.3, total_time_text, fontsize=10, weight='bold', color='black', ha='center', va='center')

        legend_without_labels = ax.legend(wedges, labels, title='', loc="upper center", bbox_to_anchor=(0.5, 1.15),
                                        ncol=len(labels), fontsize='small')
        ax.add_artist(legend_without_labels)
        ax.axis('equal')
        ax.text(-1.3, -1.25, "Weekly App Usage Report", fontsize=18, weight='bold', color='#4A90E2', fontname='DejaVu Sans', ha='center')

        canvas = FigureCanvas(fig)
        
        # Save the plot as BytesIO object
        image_stream = BytesIO()
        fig.savefig(image_stream, format='png')
        image_stream.seek(0)  # Reset the stream position to the beginning

        return image_stream

    def send_email_with_attachment(self):
        daily_pie_chart = self.plot_most_used_apps_pie()
        weekly_line_graph = self.setupLineGraph()  

        # Set up email parameters
        sender_email = "pandeypaurakhraj@gmail.com"
        subject = "App Usage Report"
        body = "Your weekly app usage report."

        # Create a message container - the correct MIME type is multipart/alternative
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = self.receiver_email
        msg['Subject'] = subject

        # Attach the text to the email
        msg.attach(MIMEText(body, 'plain'))

        # Attach the images
        image_attachment1 = MIMEImage(daily_pie_chart.read())
        image_attachment2 = MIMEImage(weekly_line_graph.read())

        image_attachment1.add_header('Content-Disposition', 'attachment', filename='pie_chart.png')
        image_attachment2.add_header('Content-Disposition', 'attachment', filename='line_graph.png')
        
        msg.attach(image_attachment1)
        msg.attach(image_attachment2)

        # Connect to Gmail's SMTP server
        server = SMTP("smtp.gmail.com", 587)
        server.starttls()
        server.login(sender_email, "wofe qapr tmzk pymt")

        # Send the email
        server.sendmail(sender_email, self.receiver_email, msg.as_string())

        # Disconnect from the server
        server.quit()

        print(f"Email with the pie chart attachment has been sent to {self.receiver_email}.")

    def setupLineGraph(self):
    # Open the database connection
        conn = sqlite3.connect('app_screen_time.db')
        cursor = conn.cursor()
        self.fig, self.ax = plt.subplots()


        top_3_apps = self.get_top_3_apps(cursor)  # Pass the cursor to get_top_3_apps method
        days_of_week = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
        line_colors = ['#9370DB', 'limegreen', 'skyblue']

        # Matplotlib setup
        fig_line, ax_line = plt.subplots(figsize=(6, 4))

        for i, app_info in enumerate(top_3_apps):
            app_name = app_info[0]
            app_usage = []
            for day in days_of_week:
                cursor.execute("SELECT total_screen_time FROM screen_time WHERE app_name=? AND Day=?", (app_name, day))
                total_time = cursor.fetchone()
                app_usage.append(total_time[0] if total_time else 0)

            # Plotting usage over the week with specified line color and 'o' markers
            ax_line.plot(days_of_week, app_usage, label=app_name, marker='o', color=line_colors[i])

        # Set title, labels, legend, and other plot configurations
        title_font = {'family': 'sans-serif', 'weight': 'bold', 'size': 16, 'color': 'black'}
        ax_line.set_title('Trend of Most Used Apps Over The Week', fontdict=title_font, loc='left')
        ax_line.set_ylabel('Total Screen Time', color='grey')
        ax_line.legend(loc='upper left', bbox_to_anchor=(0.7, 1.07), ncol=len(top_3_apps), frameon=False, facecolor='white', edgecolor='white')
        ax_line.spines['top'].set_visible(False)
        ax_line.spines['right'].set_visible(False)
        ax_line.spines['bottom'].set_visible(True)
        ax_line.spines['left'].set_visible(False)
        plt.tick_params(axis='both', colors='grey')
        plt.grid(axis='y', linestyle='-', alpha=0.7)

        # Draw the canvas and save the plot as BytesIO object
        canvas_line = FigureCanvas(fig_line)
        image_stream = BytesIO()
        fig_line.savefig(image_stream, format='png')
        image_stream.seek(0)  # Reset the stream position to the beginning

        # Close the database connection
        conn.close()

        return image_stream
    
    def get_screen_time_per_day(self):
        cursor = self.conn.cursor()  # Use the connection attribute

        conn = sqlite3.connect('app_screen_time.db')

        cursor = conn.cursor()

        # Get the current day of the week
        today = datetime.datetime.today().strftime('%A')

        # Define the order of days starting from Sunday
        days_order = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']

        # Find the index of the first available day in the database
        first_day_index = days_order.index(today)

        # Reorder the days to start from the first available day
        reordered_days = days_order[first_day_index:] + days_order[:first_day_index]

        # Generate the ORDER BY clause based on the reordered days
        order_by_clause = 'CASE Day '

        for i, day in enumerate(reordered_days, start=1):
            order_by_clause += f'WHEN \'{day}\' THEN {i} '

        order_by_clause += 'END'

        # Execute the SQL query with the dynamically generated ORDER BY clause
        cursor.execute(f"SELECT Day, SUM(total_screen_time) FROM screen_time GROUP BY Day ORDER BY {order_by_clause}")

        data = cursor.fetchall()
        return data

    def get_top_3_apps(self, cursor):
        cursor.execute("SELECT app_name, SUM(total_screen_time) AS total_time FROM screen_time GROUP BY app_name ORDER BY total_time DESC LIMIT 3")
        top_3_apps = cursor.fetchall()
        return top_3_apps
 
 
if __name__ == "__main__":
    app = QApplication(sys.argv)
    widget = QStackedWidget()
    MainWindow = Login()
    widget.addWidget(MainWindow)
    widget.show()
    sys.exit(app.exec_())